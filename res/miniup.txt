language Miniup
[
casesensitive : true,
startsymbol : langdef,
usedefaulttokens : true,
disableautowhitespace : false
//default-token : [SingleLineComment, MultiLineCommet, Whitespace, Identifier, SingleQuotedString, DoubleQuotedString, Integer, Float, RegularExpression]
]

//token Whitespace [whitespace] 	= /\s+/;

//token Comments1 [whitespace,style='color=green;font-style=italic'] 	= /\/\/[^\n]*\n/;
//based on http=//ostermiller.org/findcomment.html=
//token Comments2 [whitespace] 	= /\/\*(?=.|[\n\r])*?\*\//;

//token IDENTIFIER 			= /[a-zA-Z_][a-zA-Z_0-9]*/;
//token StringSingle              = /'([^']|(\\[btnfr"'\\]))*'/;
//token StringDouble              = /"([^"]|(\\[btnfr"'\\]))*"/;
//   /([^\\/]|(\\[\\\/]))*/
//token RegExp                    = /\/([^\\\/]|(\\.))*\//;

sequence langdef 	= 'language' IDENTIFIER options definitions ';' ? ;
list options 			= '[' option ',' ']';
choice option[nonode] 	= valueoption | IDENTIFIER ;
sequence valueoption = IDENTIFIER ':' value;

list definitions[allowtrailing] 		= definition ';';
choice definition 		= tokenDef | choiceDef | sequenceDef | listDef | setDef | opDef | importDef;

sequence tokenDef 	= 'token' IDENTIFIER options ? '=' REGULAREXPRESSION;

sequence choiceDef 	= 'choice' IDENTIFIER options? '=' choices;
list choices 			= value '|';

sequence sequenceDef 	= 'sequence' IDENTIFIER options? '=' sequenceItems;
list sequenceItems 	    = sequenceItem;
sequence sequenceItem 	= (IDENTIFIER ':')? value '?'?;

//sequence compItem 	= value '?'? compItemOptions?;
//set compItemOptions 	= 'newline' | 'indent' | 'outdent' | 'merge' using '[' ',' ']';

sequence listDef		= 'list' IDENTIFIER options? '=' values;
sequence setDef		    = 'set'  IDENTIFIER options? '=' (namedValue '|')* 'using'? values?;

sequence namedValue     = IDENTIFIER ':' value;

list values 			= value;
choice value 			= String | IDENTIFIER | subrule;
choice String 			= SINGLEQUOTEDSTRING  | DOUBLEQUOTEDSTRING ;

sequence opDef = 'operator' IDENTIFIER options? '=' value value;

sequence importDef = 'import' IDENTIFIER options? '=' languagename:IDENTIFIER '.' rulename: IDENTIFIER?;

/* Subrule definitions. Will be desuggared to anonymous normal rules. Note= those are not in the bootstrap config */

choice subrule =  listSubrule | choiceSubrule | sequenceSubrule;

sequence listSubrule = '(' values ')' '*'; //list is prefered above the others as it disambiguates by '*'
list choiceSubrule      = '(' value '|' ')'; //note that this one is ambigue with CombSubrule for '(' A ')'. That doesn't matter as they do effectively the same
list sequenceSubrule    = '(' sequenceItem ')';



/*
token name [whitespace] = regexp;
//nodename empty merges down
choice name [color='x', nodename = 'bla']= identifier | ...;
choice name [color='x', nodename = 'bla']= identifier | ...;
list  name [nullable] = identifier{1,2,4};
sequence  name [] = identifier?[newline indent outdent mergedown];
*/


//option identifier = string ;
//identifier is whitespace? token = regexp ;
//identifier is choice = identifier | + ;
//identifier is nullable? list = identifier? identifier identifier? identifier?;
//identifier is sequence = ( identifier ?? )+;
//identifier is left/right? infix/prefix/suffix operator= operand? operator operand?;


