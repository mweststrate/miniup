package nl.mweststrate.miniup;

import nl.mweststrate.miniup.matcher.TokenMatcher;


public class Token {

	int line = 0;
    int col = 0;
    private TokenMatcher matcher;
    private String text;
    
    /**
     * Constructor used by the parser to create new tokens
     * @param tokenMatcher
     * @param text
     */
    public Token(TokenMatcher tokenMatcher, String text) {
        this.matcher = tokenMatcher;
        this.text = text;
    }

    /**
     * Used by the parser to set the coords of this token in the original input file
     * @param line
     * @param col
     */
    public void setCoords(int line, int col) {
        this.line = line;
        this.col = col;
    }
    
    /**
     * Returns the text matched by this token
     * @return
     */
    public String getText() { return this.text; }
    
    /**
     * Returns the line number at which this token was matched
     * @return
     */
    public int getLineNr() { return line; }
    
    /**
     * returns the column number at which this token was matched
     * @return
     */
    public int getColNr() { return col; }
    
    /**
     * returns whether this token was just matching whitespace. Whitespace matching tokens are not added to the Abstract Syntax Tree generated by the parser
     * @return
     */
    public boolean isWhiteSpace() { return matcher.isWhiteSpace(); }
    
    public String toString() {
        return String.format("<%s @ %d:%d = %s>", matcher.getName(), line, col, text.replaceAll("\n", "\\\\n").replaceAll("\r",""));
    }

}
